// Code generated by mockery v2.46.0. DO NOT EDIT.

package domain

import (
	authdomain "github.com/prajnasatryass/tic-be/internal/auth/domain"
	domain "github.com/prajnasatryass/tic-be/internal/user/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockAuthRepository is an autogenerated mock type for the AuthRepository type
type MockAuthRepository struct {
	mock.Mock
}

type MockAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepository) EXPECT() *MockAuthRepository_Expecter {
	return &MockAuthRepository_Expecter{mock: &_m.Mock}
}

// CreateAccessToken provides a mock function with given fields: user, secret, ttl
func (_m *MockAuthRepository) CreateAccessToken(user *domain.User, secret string, ttl int) (string, error) {
	ret := _m.Called(user, secret, ttl)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User, string, int) (string, error)); ok {
		return rf(user, secret, ttl)
	}
	if rf, ok := ret.Get(0).(func(*domain.User, string, int) string); ok {
		r0 = rf(user, secret, ttl)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.User, string, int) error); ok {
		r1 = rf(user, secret, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepository_CreateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessToken'
type MockAuthRepository_CreateAccessToken_Call struct {
	*mock.Call
}

// CreateAccessToken is a helper method to define mock.On call
//   - user *domain.User
//   - secret string
//   - ttl int
func (_e *MockAuthRepository_Expecter) CreateAccessToken(user interface{}, secret interface{}, ttl interface{}) *MockAuthRepository_CreateAccessToken_Call {
	return &MockAuthRepository_CreateAccessToken_Call{Call: _e.mock.On("CreateAccessToken", user, secret, ttl)}
}

func (_c *MockAuthRepository_CreateAccessToken_Call) Run(run func(user *domain.User, secret string, ttl int)) *MockAuthRepository_CreateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.User), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockAuthRepository_CreateAccessToken_Call) Return(_a0 string, _a1 error) *MockAuthRepository_CreateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_CreateAccessToken_Call) RunAndReturn(run func(*domain.User, string, int) (string, error)) *MockAuthRepository_CreateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRefreshToken provides a mock function with given fields: user, secret, ttl
func (_m *MockAuthRepository) CreateRefreshToken(user *domain.User, secret string, ttl int) (string, error) {
	ret := _m.Called(user, secret, ttl)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User, string, int) (string, error)); ok {
		return rf(user, secret, ttl)
	}
	if rf, ok := ret.Get(0).(func(*domain.User, string, int) string); ok {
		r0 = rf(user, secret, ttl)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.User, string, int) error); ok {
		r1 = rf(user, secret, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepository_CreateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefreshToken'
type MockAuthRepository_CreateRefreshToken_Call struct {
	*mock.Call
}

// CreateRefreshToken is a helper method to define mock.On call
//   - user *domain.User
//   - secret string
//   - ttl int
func (_e *MockAuthRepository_Expecter) CreateRefreshToken(user interface{}, secret interface{}, ttl interface{}) *MockAuthRepository_CreateRefreshToken_Call {
	return &MockAuthRepository_CreateRefreshToken_Call{Call: _e.mock.On("CreateRefreshToken", user, secret, ttl)}
}

func (_c *MockAuthRepository_CreateRefreshToken_Call) Run(run func(user *domain.User, secret string, ttl int)) *MockAuthRepository_CreateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.User), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockAuthRepository_CreateRefreshToken_Call) Return(_a0 string, _a1 error) *MockAuthRepository_CreateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_CreateRefreshToken_Call) RunAndReturn(run func(*domain.User, string, int) (string, error)) *MockAuthRepository_CreateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExpiredRefreshTokens provides a mock function with given fields:
func (_m *MockAuthRepository) DeleteExpiredRefreshTokens() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredRefreshTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_DeleteExpiredRefreshTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpiredRefreshTokens'
type MockAuthRepository_DeleteExpiredRefreshTokens_Call struct {
	*mock.Call
}

// DeleteExpiredRefreshTokens is a helper method to define mock.On call
func (_e *MockAuthRepository_Expecter) DeleteExpiredRefreshTokens() *MockAuthRepository_DeleteExpiredRefreshTokens_Call {
	return &MockAuthRepository_DeleteExpiredRefreshTokens_Call{Call: _e.mock.On("DeleteExpiredRefreshTokens")}
}

func (_c *MockAuthRepository_DeleteExpiredRefreshTokens_Call) Run(run func()) *MockAuthRepository_DeleteExpiredRefreshTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthRepository_DeleteExpiredRefreshTokens_Call) Return(_a0 error) *MockAuthRepository_DeleteExpiredRefreshTokens_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_DeleteExpiredRefreshTokens_Call) RunAndReturn(run func() error) *MockAuthRepository_DeleteExpiredRefreshTokens_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRefreshToken provides a mock function with given fields: refreshToken
func (_m *MockAuthRepository) DeleteRefreshToken(refreshToken string) error {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_DeleteRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRefreshToken'
type MockAuthRepository_DeleteRefreshToken_Call struct {
	*mock.Call
}

// DeleteRefreshToken is a helper method to define mock.On call
//   - refreshToken string
func (_e *MockAuthRepository_Expecter) DeleteRefreshToken(refreshToken interface{}) *MockAuthRepository_DeleteRefreshToken_Call {
	return &MockAuthRepository_DeleteRefreshToken_Call{Call: _e.mock.On("DeleteRefreshToken", refreshToken)}
}

func (_c *MockAuthRepository_DeleteRefreshToken_Call) Run(run func(refreshToken string)) *MockAuthRepository_DeleteRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthRepository_DeleteRefreshToken_Call) Return(_a0 error) *MockAuthRepository_DeleteRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_DeleteRefreshToken_Call) RunAndReturn(run func(string) error) *MockAuthRepository_DeleteRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserRefreshTokens provides a mock function with given fields: userID
func (_m *MockAuthRepository) DeleteUserRefreshTokens(userID uuid.UUID) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserRefreshTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_DeleteUserRefreshTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserRefreshTokens'
type MockAuthRepository_DeleteUserRefreshTokens_Call struct {
	*mock.Call
}

// DeleteUserRefreshTokens is a helper method to define mock.On call
//   - userID uuid.UUID
func (_e *MockAuthRepository_Expecter) DeleteUserRefreshTokens(userID interface{}) *MockAuthRepository_DeleteUserRefreshTokens_Call {
	return &MockAuthRepository_DeleteUserRefreshTokens_Call{Call: _e.mock.On("DeleteUserRefreshTokens", userID)}
}

func (_c *MockAuthRepository_DeleteUserRefreshTokens_Call) Run(run func(userID uuid.UUID)) *MockAuthRepository_DeleteUserRefreshTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthRepository_DeleteUserRefreshTokens_Call) Return(_a0 error) *MockAuthRepository_DeleteUserRefreshTokens_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_DeleteUserRefreshTokens_Call) RunAndReturn(run func(uuid.UUID) error) *MockAuthRepository_DeleteUserRefreshTokens_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveRefreshToken provides a mock function with given fields: refreshToken
func (_m *MockAuthRepository) RetrieveRefreshToken(refreshToken string) (authdomain.RefreshTokenRecord, error) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveRefreshToken")
	}

	var r0 authdomain.RefreshTokenRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (authdomain.RefreshTokenRecord, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) authdomain.RefreshTokenRecord); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Get(0).(authdomain.RefreshTokenRecord)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepository_RetrieveRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveRefreshToken'
type MockAuthRepository_RetrieveRefreshToken_Call struct {
	*mock.Call
}

// RetrieveRefreshToken is a helper method to define mock.On call
//   - refreshToken string
func (_e *MockAuthRepository_Expecter) RetrieveRefreshToken(refreshToken interface{}) *MockAuthRepository_RetrieveRefreshToken_Call {
	return &MockAuthRepository_RetrieveRefreshToken_Call{Call: _e.mock.On("RetrieveRefreshToken", refreshToken)}
}

func (_c *MockAuthRepository_RetrieveRefreshToken_Call) Run(run func(refreshToken string)) *MockAuthRepository_RetrieveRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthRepository_RetrieveRefreshToken_Call) Return(_a0 authdomain.RefreshTokenRecord, _a1 error) *MockAuthRepository_RetrieveRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_RetrieveRefreshToken_Call) RunAndReturn(run func(string) (authdomain.RefreshTokenRecord, error)) *MockAuthRepository_RetrieveRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// StoreRefreshToken provides a mock function with given fields: record
func (_m *MockAuthRepository) StoreRefreshToken(record *authdomain.RefreshTokenRecord) error {
	ret := _m.Called(record)

	if len(ret) == 0 {
		panic("no return value specified for StoreRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*authdomain.RefreshTokenRecord) error); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_StoreRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreRefreshToken'
type MockAuthRepository_StoreRefreshToken_Call struct {
	*mock.Call
}

// StoreRefreshToken is a helper method to define mock.On call
//   - record *authdomain.RefreshTokenRecord
func (_e *MockAuthRepository_Expecter) StoreRefreshToken(record interface{}) *MockAuthRepository_StoreRefreshToken_Call {
	return &MockAuthRepository_StoreRefreshToken_Call{Call: _e.mock.On("StoreRefreshToken", record)}
}

func (_c *MockAuthRepository_StoreRefreshToken_Call) Run(run func(record *authdomain.RefreshTokenRecord)) *MockAuthRepository_StoreRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*authdomain.RefreshTokenRecord))
	})
	return _c
}

func (_c *MockAuthRepository_StoreRefreshToken_Call) Return(_a0 error) *MockAuthRepository_StoreRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_StoreRefreshToken_Call) RunAndReturn(run func(*authdomain.RefreshTokenRecord) error) *MockAuthRepository_StoreRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthRepository creates a new instance of MockAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepository {
	mock := &MockAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
