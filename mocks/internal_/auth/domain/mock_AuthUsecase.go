// Code generated by mockery v2.46.0. DO NOT EDIT.

package domain

import (
	domain "github.com/prajnasatryass/go-clean-arch-example/internal/auth/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthUsecase is an autogenerated mock type for the AuthUsecase type
type MockAuthUsecase struct {
	mock.Mock
}

type MockAuthUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthUsecase) EXPECT() *MockAuthUsecase_Expecter {
	return &MockAuthUsecase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: email, password
func (_m *MockAuthUsecase) Login(email string, password string) (domain.LoginResponse, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 domain.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.LoginResponse, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.LoginResponse); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(domain.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *MockAuthUsecase_Expecter) Login(email interface{}, password interface{}) *MockAuthUsecase_Login_Call {
	return &MockAuthUsecase_Login_Call{Call: _e.mock.On("Login", email, password)}
}

func (_c *MockAuthUsecase_Login_Call) Run(run func(email string, password string)) *MockAuthUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthUsecase_Login_Call) Return(_a0 domain.LoginResponse, _a1 error) *MockAuthUsecase_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUsecase_Login_Call) RunAndReturn(run func(string, string) (domain.LoginResponse, error)) *MockAuthUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: refreshToken
func (_m *MockAuthUsecase) Logout(refreshToken string) error {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthUsecase_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockAuthUsecase_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - refreshToken string
func (_e *MockAuthUsecase_Expecter) Logout(refreshToken interface{}) *MockAuthUsecase_Logout_Call {
	return &MockAuthUsecase_Logout_Call{Call: _e.mock.On("Logout", refreshToken)}
}

func (_c *MockAuthUsecase_Logout_Call) Run(run func(refreshToken string)) *MockAuthUsecase_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthUsecase_Logout_Call) Return(_a0 error) *MockAuthUsecase_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthUsecase_Logout_Call) RunAndReturn(run func(string) error) *MockAuthUsecase_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: refreshToken
func (_m *MockAuthUsecase) Refresh(refreshToken string) (domain.RefreshResponse, error) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 domain.RefreshResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.RefreshResponse, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) domain.RefreshResponse); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Get(0).(domain.RefreshResponse)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUsecase_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockAuthUsecase_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - refreshToken string
func (_e *MockAuthUsecase_Expecter) Refresh(refreshToken interface{}) *MockAuthUsecase_Refresh_Call {
	return &MockAuthUsecase_Refresh_Call{Call: _e.mock.On("Refresh", refreshToken)}
}

func (_c *MockAuthUsecase_Refresh_Call) Run(run func(refreshToken string)) *MockAuthUsecase_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthUsecase_Refresh_Call) Return(_a0 domain.RefreshResponse, _a1 error) *MockAuthUsecase_Refresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUsecase_Refresh_Call) RunAndReturn(run func(string) (domain.RefreshResponse, error)) *MockAuthUsecase_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthUsecase creates a new instance of MockAuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthUsecase {
	mock := &MockAuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
