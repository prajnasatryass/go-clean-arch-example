// Code generated by mockery v2.46.0. DO NOT EDIT.

package domain

import (
	domain "github.com/prajnasatryass/go-clean-arch-example/internal/user/domain"
	constants "github.com/prajnasatryass/go-clean-arch-example/pkg/constants"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUserUsecase is an autogenerated mock type for the UserUsecase type
type MockUserUsecase struct {
	mock.Mock
}

type MockUserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserUsecase) EXPECT() *MockUserUsecase_Expecter {
	return &MockUserUsecase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: email, password
func (_m *MockUserUsecase) Create(email string, password string) (domain.CreateResponse, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.CreateResponse, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.CreateResponse); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(domain.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserUsecase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserUsecase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *MockUserUsecase_Expecter) Create(email interface{}, password interface{}) *MockUserUsecase_Create_Call {
	return &MockUserUsecase_Create_Call{Call: _e.mock.On("Create", email, password)}
}

func (_c *MockUserUsecase_Create_Call) Run(run func(email string, password string)) *MockUserUsecase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockUserUsecase_Create_Call) Return(_a0 domain.CreateResponse, _a1 error) *MockUserUsecase_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserUsecase_Create_Call) RunAndReturn(run func(string, string) (domain.CreateResponse, error)) *MockUserUsecase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByID provides a mock function with given fields: id
func (_m *MockUserUsecase) DeleteByID(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserUsecase_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockUserUsecase_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockUserUsecase_Expecter) DeleteByID(id interface{}) *MockUserUsecase_DeleteByID_Call {
	return &MockUserUsecase_DeleteByID_Call{Call: _e.mock.On("DeleteByID", id)}
}

func (_c *MockUserUsecase_DeleteByID_Call) Run(run func(id uuid.UUID)) *MockUserUsecase_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserUsecase_DeleteByID_Call) Return(_a0 error) *MockUserUsecase_DeleteByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserUsecase_DeleteByID_Call) RunAndReturn(run func(uuid.UUID) error) *MockUserUsecase_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *MockUserUsecase) GetByID(id uuid.UUID) (domain.GetByIDResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.GetByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (domain.GetByIDResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.GetByIDResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.GetByIDResponse)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserUsecase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserUsecase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockUserUsecase_Expecter) GetByID(id interface{}) *MockUserUsecase_GetByID_Call {
	return &MockUserUsecase_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockUserUsecase_GetByID_Call) Run(run func(id uuid.UUID)) *MockUserUsecase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserUsecase_GetByID_Call) Return(_a0 domain.GetByIDResponse, _a1 error) *MockUserUsecase_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserUsecase_GetByID_Call) RunAndReturn(run func(uuid.UUID) (domain.GetByIDResponse, error)) *MockUserUsecase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleByID provides a mock function with given fields: id, roleID
func (_m *MockUserUsecase) UpdateRoleByID(id uuid.UUID, roleID constants.UserRole) error {
	ret := _m.Called(id, roleID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, constants.UserRole) error); ok {
		r0 = rf(id, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserUsecase_UpdateRoleByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleByID'
type MockUserUsecase_UpdateRoleByID_Call struct {
	*mock.Call
}

// UpdateRoleByID is a helper method to define mock.On call
//   - id uuid.UUID
//   - roleID constants.UserRole
func (_e *MockUserUsecase_Expecter) UpdateRoleByID(id interface{}, roleID interface{}) *MockUserUsecase_UpdateRoleByID_Call {
	return &MockUserUsecase_UpdateRoleByID_Call{Call: _e.mock.On("UpdateRoleByID", id, roleID)}
}

func (_c *MockUserUsecase_UpdateRoleByID_Call) Run(run func(id uuid.UUID, roleID constants.UserRole)) *MockUserUsecase_UpdateRoleByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(constants.UserRole))
	})
	return _c
}

func (_c *MockUserUsecase_UpdateRoleByID_Call) Return(_a0 error) *MockUserUsecase_UpdateRoleByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserUsecase_UpdateRoleByID_Call) RunAndReturn(run func(uuid.UUID, constants.UserRole) error) *MockUserUsecase_UpdateRoleByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserUsecase creates a new instance of MockUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserUsecase {
	mock := &MockUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
